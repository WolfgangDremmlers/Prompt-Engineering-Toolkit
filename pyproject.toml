[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "prompt-engineering-toolkit"
version = "2.0.0"
description = "Advanced red teaming toolkit for LLM safety evaluation"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Wolfgang Dremmler", email = "wolfgang@example.com"}
]
maintainers = [
    {name = "Wolfgang Dremmler", email = "wolfgang@example.com"}
]
keywords = [
    "llm",
    "safety", 
    "red-team",
    "prompt-engineering",
    "ai-safety",
    "evaluation",
    "testing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "openai>=1.0.0",
    "pandas>=1.5.0",
    "numpy>=1.20.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
]
anthropic = [
    "anthropic>=0.7.0",
]
azure = [
    "azure-openai>=1.0.0",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
]
analysis = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "jupyter>=1.0.0",
]
all = [
    "anthropic>=0.7.0",
    "azure-openai>=1.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/WolfgangDremmler/prompt-engineering-toolkit"
Documentation = "https://prompt-engineering-toolkit.readthedocs.io/"
Repository = "https://github.com/WolfgangDremmler/prompt-engineering-toolkit.git"
"Bug Reports" = "https://github.com/WolfgangDremmler/prompt-engineering-toolkit/issues"
"Source Code" = "https://github.com/WolfgangDremmler/prompt-engineering-toolkit"

[project.scripts]
pet = "pet.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
pet = ["data/*.json", "data/*.yaml", "config/*.yaml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: mark test as a unit test",
    "integration: mark test as an integration test", 
    "slow: mark test as slow running",
    "api: mark test as requiring API access",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration  
[tool.coverage.run]
source = ["src/pet"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*", 
    "azure.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# flake8 configuration (in setup.cfg or .flake8, but shown here for reference)
# [flake8]
# max-line-length = 88
# extend-ignore = E203, W503
# exclude = .git,__pycache__,docs/source/conf.py,old,build,dist

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_paramiko